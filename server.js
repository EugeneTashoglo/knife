import express from "express";
import session from "express-session";
import cors from "cors";
import sqlite3 from "sqlite3";
import path from "path";
import dotenv from "dotenv";
import nodemailer from "nodemailer";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –∏–∑ .env
dotenv.config();

const app = express();
const PORT = 3000;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
const dbPath = path.resolve("C:/sqlite/knives.db");
const db = new sqlite3.Database(dbPath, sqlite3.OPEN_READWRITE, (err) => {
  if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err.message);
  else console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite");
});

// CORS (—Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –∫–ª–∏–µ–Ω—Ç–∞)
app.use(cors({ origin: "http://localhost:5173", credentials: true }));
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏
app.use(
  session({
    secret: "super_secret_key",
    resave: false,
    saveUninitialized: true,
  })
);

// API: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–∂–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.get("/api/knives", (req, res) => {
  const sql = "SELECT * FROM products";
  db.all(sql, [], (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json(rows);
  });
});

// API: –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–∂ –ø–æ ID
app.get("/api/knives/:id", (req, res) => {
  const sql = "SELECT * FROM products WHERE id = ?";
  db.get(sql, [req.params.id], (err, row) => {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    if (!row) {
      res.status(404).json({ error: "–ù–æ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω." });
      return;
    }
    res.json(row);
  });
});

// API: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–∂
app.post("/api/knives", (req, res) => {
  const {
    name,
    description,
    category,
    blade_material,
    handle_material,
    length,
    weight,
    price,
    image_url,
  } = req.body;
  if (!name || !price) {
    return res.status(400).json({ error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  const sql = `
    INSERT INTO products (name, description, category, blade_material, handle_material, length, weight, price, image_url) 
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`;
  const params = [
    name,
    description,
    category,
    blade_material,
    handle_material,
    length,
    weight,
    price,
    image_url,
  ];

  db.run(sql, params, function (err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ id: this.lastID, ...req.body });
  });
});

// API: –£–¥–∞–ª–∏—Ç—å –Ω–æ–∂
app.delete("/api/knives/:id", (req, res) => {
  const sql = "DELETE FROM products WHERE id = ?";
  db.run(sql, [req.params.id], function (err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ message: "–ù–æ–∂ —É–¥–∞–ª—ë–Ω", changes: this.changes });
  });
});

// API: –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–∂–µ
app.put("/api/knives/:id", (req, res) => {
  const {
    name,
    description,
    category,
    blade_material,
    handle_material,
    length,
    weight,
    price,
    image_url,
  } = req.body;
  const sql = `
    UPDATE products 
    SET name = ?, description = ?, category = ?, blade_material = ?, handle_material = ?, length = ?, weight = ?, price = ?, image_url = ?
    WHERE id = ?`;
  const params = [
    name,
    description,
    category,
    blade_material,
    handle_material,
    length,
    weight,
    price,
    image_url,
    req.params.id,
  ];

  db.run(sql, params, function (err) {
    if (err) {
      res.status(500).json({ error: err.message });
      return;
    }
    res.json({ message: "–ù–æ–∂ –æ–±–Ω–æ–≤–ª—ë–Ω", changes: this.changes });
  });
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ nodemailer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ Yandex SMTP
const transporter = nodemailer.createTransport({
  host: "smtp.yandex.ru",
  port: 465,
  secure: true,
  auth: {
    user: "tashoglo00@yandex.ru",
    pass: "zbrquwaoswjszmyd",
  },
});

// API: –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø—Ä–∏ –∑–∞–∫–∞–∑–µ
app.post("/api/send-email", async (req, res) => {
  const { email, name, phone, address, paymentMethod, items, total } = req.body;

  if (!email || !name || !items || !total) {
    return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞" });
  }

  const mailOptions = {
    from: '"–ú–∞–≥–∞–∑–∏–Ω –Ω–æ–∂–µ–π" <tashoglo00@yandex.ru>',
    to: email,
    subject: "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω",
    text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!

–í–∞—à –∑–∞–∫–∞–∑:
${items}

–°—É–º–º–∞: ${total}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!`,
    html: `<h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</h2><p><strong>–í–∞—à –∑–∞–∫–∞–∑:</strong></p><pre>${items}</pre><p><strong>–°—É–º–º–∞:</strong> ${total}</p><p>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</p>`,
  };

  try {
    await transporter.sendMail(mailOptions);
    res.json({ success: true, message: "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" });
  } catch (error) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞." });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
